Standard streams
From Wikipedia, the free encyclopedia
This article is about standard I/O file descriptors. For System V streams, see STREAMS.
    This article includes a list of references, but its sources remain unclear because it has insufficient inline citations. Please help to improve this article by introducing more precise citations. (March 2010)

In computer programming, standard streams are preconnected input and output streams (communication channels) between a computer program and its environment when it begins execution. The three I/O connections are called standard input (stdin), standard output (stdout) and standard error (stderr). Originally I/O happened via a physically connected system console (input via keyboard, output via monitor), but standard streams abstract this. When a command is executed via a shell, the streams are typically connected to the text terminal in which the shell is running, but can be changed with redirection, particularly via a pipeline. However, daemons do not have an associated terminal or standard streams. More generally, a child process will inherit the standard streams of its parent process.

Contents

    1 Application
    2 Background
    3 Standard input (stdin)
    4 Standard output (stdout)
    5 Standard error (stderr)
    6 Timeline
        6.1 1950s: Fortran
        6.2 1960: ALGOL 60
        6.3 1968: ALGOL 68
        6.4 1970s: C and Unix
        6.5 1995: Java
        6.6 2000s: .NET
        6.7 GUIs
    7 See also
    8 References
    9 External links

Application
The standard streams for input, output, and error

Users generally know these streams as mediums by which text incoming from an input device and text outgoing to display are handled. As they are used for input and output devices, they generally contain text, a sequence of characters in a predetermined encoding, such as Latin-1 or UTF-8.

These streams can also be chained; the output of a program can then be the input of another one. A well-known example is the use of a pager such as more, which gives the user a way to control which part of the output stream appears on the display.

Although the dominant usage is for the standard streams to contain text, it is possible to use them to transfer arbitrary binary data.
Background

In most operating systems predating Unix, programs had to explicitly connect to the appropriate input and output devices. OS-specific intricacies caused this to be an intimidating programming challenge. On many systems it was necessary to obtain control of environment settings, access a local file table, determine the intended data set, and handle hardware correctly in the case of punch card reader, magnetic tape drive, disk drive, line printer, card punch, or interactive terminal.

One of Unix's several groundbreaking advances was abstract devices, which removed the need for a program to know or care what kind of devices it was communicating with.[citation needed] Older operating systems forced upon the programmer a record structure and frequently non-orthogonal data semantics and device control. Unix eliminated this complexity with the concept of a data stream: an ordered sequence of data bytes which can be read until the end of file. A program may also write bytes as desired and need not (and can't easily) declare how many there will be, or how they will be grouped.

Another Unix breakthrough was to automatically associate input and output by default[citation needed] — the program (and programmer) did absolutely nothing to establish input and output for a typical input-process-output program (unless it chose a different paradigm). In contrast, previous operating systems usually required some—often complex—job control language to establish connections, or the equivalent burden had to be orchestrated by the program.

Since Unix provided standard streams, the Unix C runtime environment was obliged to support it as well. As a result, most C runtime environments (and C's descendants), regardless of the operating system, provide equivalent functionality.
Standard input (stdin)

Standard input is data (often text) going into a program. The program requests data transfers by use of the read operation. Not all programs require input. For example, the dir and ls programs (which display file names contained in a directory) perform their operations without any stream data input.

Unless redirected, input is expected from the keyboard which started the program.

The file descriptor for standard input is 0 (zero); the POSIX <unistd.h> definition is STDIN_FILENO; the corresponding <stdio.h> variable is FILE* stdin; similarly, the <iostream> variable is std::cin.
Standard output (stdout)

Standard output is the stream where a program writes its output data. The program requests data transfer with the write operation. Not all programs generate output. For example the file rename command (variously called mv, move, or ren) is silent on success.

Unless redirected, standard output is the text terminal which initiated the program.

The file descriptor for standard output is 1 (one); the POSIX <unistd.h> definition is STDOUT_FILENO; the corresponding <stdio.h> variable is FILE* stdout; similarly, the <iostream> variable is std::cout.
Standard error (stderr)

Standard error is another output stream typically used by programs to output error messages or diagnostics. It is a stream independent of standard output and can be redirected separately. This solves the semipredicate problem, allowing output and errors to be distinguished, and is analogous to a function returning a pair of values – see Semipredicate problem: Multivalued return. The usual destination is the text terminal which started the program to provide the best chance of being seen even if standard output is redirected (so not readily observed). For example, output of a program in a pipeline is redirected to input of the next program, but errors from each program still go directly to the text terminal.

It is acceptable—and normal—for standard output and standard error to be directed to the same destination, such as the text terminal. Messages appear in the same order as the program writes them, unless buffering is involved. (For example, a common situation is when the standard error stream is unbuffered but the standard output stream is line-buffered; in this case, text written to standard error later may appear on the terminal earlier, if the standard output stream's buffer is not yet full.)

The file descriptor for standard error is 2; the POSIX <unistd.h> definition is STDERR_FILENO; the corresponding <stdio.h> variable is FILE* stderr. The C++ <iostream> standard header provides two variables associated with this stream: std::cerr and std::clog, the former being unbuffered and the latter using the same buffering mechanism as all other C++ streams.

Most shells[citation needed] allow both standard output and standard error to be redirected to the same file using

 &> filename

Bourne-style shells allow standard error to be redirected to the same destination that standard output is directed to using

 2>&1

csh-style shells allow standard error to be redirected to the same destination that standard output is directed to using

 >&

